program p14_code_name_LAST;

type 
 PList = ^TList;
 TList = record
    Data : integer;
    Next : PList;
end;

Var
    HeadL,HeadE,listLastL,listLastE : PList;
    setListRangeL,setListRangeE,i,randomRange:integer;
    
    procedure deleteList(var ReL,ReE:PList);
        var resultList:PList;
            i,a,counter:integer;
            SpisokE,SpisokL,result: array of integer;
        begin
        
        setlength(SpisokE,setListRangeE);
        setlength(SpisokL,setListRangeL);
        setlength(result,setListRangeL);
        
            while ReE <> nil do
                begin
                    for i:= 1 to setListRangeE do
                        begin
                            SpisokE[i]:= ReE^.Data;
                            ReE:= ReE^.Next;
                        end;
                end;
                
            while ReL <> nil do
                begin
                    for i:= 1 to setListRangeL do
                        begin
                            SpisokL[i]:= ReL^.Data;
                            ReL:= ReL^.Next;
                        end;
                end;
            
            for i:=1 to setListRangeL do
                for a:=1 to setListRangeE do
                    begin
                        if SpisokE[a] = SpisokL[i] then
                            begin
                                SpisokE[a]:= 0
                            end;
                    end;
                    
            for i:=1 to setListRangeL do
                begin
                    if SpisokE[i] <> 0 then
                        begin
                            new(resultList);
                            resultList^.Data:= SpisokE[i];
                            resultList^.Next:= ReE;
                            ReE:= resultList;
                        end;
                end;
                
            for i:=1 to setListRangeE do
                if SpisokE[i] <> 0 then
                    begin
                        while resultList <> nil do
                            begin
                                write(' ',resultList^.Data);
                                resultList:= resultList^.next;
                            end;
                    end;
        end;
    
    procedure addhead(var t:PList);
       var y:PList;
           i:integer;
        begin
            new(y);
            readln(i);
            y^.Data:= i;
            y^.Next:= t;
            t:= y;
        end;
    
begin

 randomize();
 writeln('Задайте длину для списка L');
 read(setListRangeL);
 writeln();
 
 writeln('Задайте длину для списка E');
 read(setListRangeE);
 writeln();

    for i:=1 to setListRangeL do
        begin
            writeln('Введите элемент списка L не равный нулю');
            addhead(HeadL);
        end;
        
 writeln();        
 listLastL:= HeadL;
    
     for i:=1 to setListRangeE do
        begin
            writeln('Введите элемент списка E не равный нулю');
            addhead(HeadE);
        end;
 writeln();        
 listLastE:= HeadE;
    
    
    if setListRangeL <> 0 then
        begin
            writeln('Список L');
                while listLastL <> nil do
                    begin
                        write(' ',listLastL^.Data);
                        listLastL:= listLastL^.next;
                    end;
        end;

    writeln();
    writeln();
    
    if setListRangeE <> 0 then
        begin
            writeln('Изначальный Список E');
                while listLastE <> nil do
                    begin
                        write(' ',listLastE^.Data);
                        listLastE:= listLastE^.next;
                    end;
        end;
    
    writeln();
    writeln();
    writeln('Измененный список Е'); 
    if (setListRangeE <> 0) and (setListRangeL <> 0) then
        begin
            deleteList(HeadL,HeadE);
        end
    else
        writeln('Списки пустые');
    
end.
